name: CppCheck

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-20.04


    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Setup CMake
      uses: lukka/run-cmake@v1

    # - name: Install dependencies
    #   run: |
    #     sudo apt-get update
    #     sudo apt-get upgrade -y 
    #     sudo apt-get install -y cppcheck
    - name: cppcheck
      uses: deep5050/cppcheck-action@main
      with:
        github_token: ${{ secrets.GITHUB_TOKEN}}

    - name: setup init_script
      shell: bash
      run: |
        echo "#!/bin/bash

        # Input args provided by StaticAnalysis action
        root_dir=\${1}
        build_dir=\${2}
        echo \"Hello from the init script! First arg=\${root_dir} second arg=\${build_dir}\"

        add-apt-repository ppa:oibaf/graphics-drivers
        apt update && apt upgrade
        apt install -y libvulkan1 mesa-vulkan-drivers vulkan-utils" > init_script.sh
  
    - name: Run static analysis
      uses: JacobDomagala/StaticAnalysis@master
      with:
        language: c++

        # Exclude any issues found in ${Project_root_dir}/lib
        exclude_dir: lib

        use_cmake: true

        # Additional script that will be run (sourced) AFTER 'apt_pckgs' and before running Cmake
        init_script: init_script.sh

        # (Optional) clang-tidy args
        clang_tidy_args: -checks='*,fuchsia-*,google-*,zircon-*,abseil-*,modernize-use-trailing-return-type'

        # (Optional) cppcheck args
        cppcheck_args: --enable=all --suppress=missingInclude
        
    # - name: Run CppCheck
    # #   ##run: cppcheck --enable=all --xml --xml-version=2 --check-config --std=c++11 .
    #   run: cppcheck --enable=all --force --inconclusive --xml --xml-version=2 --output-file=cppcheck-report.xml .
    # #   ##run: cppcheck --enable=all --xml --xml-version=2 .

    - name: Set Artifact Name
      id: set_artifact_name
      run: |
        SHORT_SHA=$(echo "${GITHUB_SHA::5}")
        echo "ARTIFACT_NAME=cppcheck-report-$(date +'%Y-%m-%d-%H-%M-%S')-${SHORT_SHA}" >> $GITHUB_ENV
      shell: bash

    - name: Upload CppCheck results
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.ARTIFACT_NAME }}
        path: ./cppcheck-report.xml

    # - name: Create artifact
    #   run: |
    #     TIMESTAMP=$(date +"%Y-%m-%d %H-%M-%S")
    #     ARTIFACT_NAME="cppcheck-report-${TIMESTAMP}-${{ github.sha }}"
    #     echo "Artifact Name: $ARTIFACT_NAME"